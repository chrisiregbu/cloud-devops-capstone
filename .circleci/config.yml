version: 2.1

orbs:
  slack: circleci/slack@4.2.0
  aws-cli: circleci/aws-cli@2.0.3 
  aws-eks: circleci/aws-eks@0.2.3

jobs:
  build-frontend:
    # The current directory will be the place where all the steps will run
    working_directory: ~/project
    docker:
        - image: circleci/node:16.13.0
    steps:
        # Checkout the code from the git branch into the working_directory
        - checkout
        # Log the current branch for debugging purposes
        - run:
            name: Show current branch
            command: echo ${CIRCLE_BRANCH}
        # Restore local dependencies (node_modules) from the CircleCI cache if it exists
        - restore_cache:
            keys:
            - v1-dependencies-{{ checksum "package.json" }}
            - v1-dependencies-
        # Install project dependencies
        - run:
            name: Install local dependencies
            command: npm install

        # Cache local dependencies in CircleCI storage if they don't exist
        # In this case, install the npm dependencies only once and then cache the node_modules folder 
        # using a hash of the package.json file as the cache key
        - save_cache:
            key: v1-dependencies-{{ checksum "package.json" }}
            paths:
                - node_modules
        # Install project dependencies
        - run:
            name: Install local dependencies
            command: 
              #npm install
              npm update
              ng update
              ng update--all--force
        - run:
            name: Build frontend app
            command: |
                sudo npm i
                npm run build
  
        # Build project with different configuration based on the current branch
        # - run:
        #     name: Configure build
        #     command: |
        #       if [ "${CIRCLE_BRANCH}" == "staging" ]; then
        #             npm run test
        #         elif [ "${CIRCLE_BRANCH}" == "master" ]; then
        #             npm run production
        #         else
        #             npm run dev
        #         fi
        # # Cache the dist folder for the deploy job
        # - save_cache:
        #       key: v1-dist-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
        #       paths:
        #         - dist

  lint-docker:
      docker: 
        - image: python:3.7.3-stretch
      steps:
        - checkout
        - restore_cache:
            key: frontend-build
        - run:
            name: Install dependencies
            command: |
              python3 m venv venv
              cd venv/Scripts
              . activate
              hadolint ./Dockerfile

  # Lint the source code
  lint-frontend:
      docker:
        - image: circleci/node:16.13.0
      steps:
        - checkout
        - restore_cache:
            key: frontend-build
        - run:
            name: Lint frontend
            command: npm run lint
        # Test the source code
        # - run:
        #     name: Test source code
        #     command: npm run test

        # Build project with different configuration based on the current branch
        # - run:
        #     name: Build project
        #     command: |
        #         if [ "${CIRCLE_BRANCH}" == "staging" ]; then
        #           npm run build-qa
        #         elif [ "${CIRCLE_BRANCH}" == "master" ]; then
        #           npm run build-prod
        #         else
        #           npm run build-dev
        #         fi
        # End to End test
  test-frontend:
      docker:
        - image: circleci/node:16.13.0
      steps:
        - checkout
        - restore_cache:
            key: frontend-build
        - run:
            name: Run End-to-End test
            command: npm run test
        # Cache the dist folder for the deploy job
        # - save_cache:
        #     key: v1-dist-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
        #     paths:
        #       - dist

    # The deploy job
    # deploy:
    #     working_directory: ~/project
    #     docker:
    #         - image: circleci/node:6.10-browsers
    #     steps:
    #         # Log the current branch
    #         - run:
    #             name: Show current branch
    #             command: echo ${CIRCLE_BRANCH}
    #         # Restore cache from the build job which contains the
    #         # dist folder that needs to be deployed
    #         - restore_cache:
    #             key: v1-dist-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
    #         # Install AWS cli
    #         - run:
    #             name: Install aws cli
    #             command:
    #                 sudo apt-get -y -qq install awscli
    #         # Set the signature version for the S3 auth
    #         - run:
    #             name: Setting Signature Version 4 for S3 Request Authentication
    #             command: aws configure set default.s3.signature_version s3v4
    #         # Deploy to the S3 bucket corresponding to the current branch
    #         - run:
    #             name: Deploy to S3
    #             command: |
    #                 if [ "${CIRCLE_BRANCH}" == "develop" ]; then
    #                     aws --region eu-west-2 s3 sync dist s3://project-dev/ --delete
    #                 elif [ "${CIRCLE_BRANCH}" == "staging" ]; then
    #                     aws --region eu-west-2 s3 sync dist s3://project-qa/ --delete
    #                 elif [ "${CIRCLE_BRANCH}" == "master" ]; then
    #                     aws --region eu-west-2 s3 sync dist s3://project/ --delete
    #                 fi
workflows:
    default:
      jobs:
        - build-frontend
        - lint-frontend:
            requires: [build-frontend]
        - lint-docker:
            requires: [build-frontend]
        - test-frontend:
            requires: [build-frontend]
          # The deploy job will only run on the filtered branches and
          # require the build job to be successful before it starts
          # - deploy:
          #     requires:
          #         - build
          #     filters:
          #         branches:
          #             only:
          #               - develop
          #               - staging
          #               - master