version: 2.1

orbs:
  slack: circleci/slack@4.2.0
  aws-cli: circleci/aws-cli@2.0.3 
  aws-eks: circleci/aws-eks@0.2.3

commands:
  # Rollback Phase
  # Reusable command that will handle the the work of destroying the green infrastructure  
  # Given a WORKFLOW ID, rollback or destroy the CloudFormation stack
  destroy-environment: 
    description: Destroy the front-end cloudformation stack given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environment << parameters.workflow_id >>
          # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable whereas  
          # ${CIRCLE_WORKFLOW_ID:0:7} takes the first 7 chars of the variable CIRCLE_CI_WORKFLOW_ID 
          when: on_fail
          command: |
              if aws s3 ls | grep cicloudapp-<< parameters.workflow_id >>; then
                echo "Destroying environment: << parameters.workflow_id >> "
                aws s3 rm s3://cicloudapp-<< parameters.workflow_id >> --recursive
              fi
              aws cloudformation delete-stack --stack-name cicloudapp-frontend-<< parameters.workflow_id >>

jobs:
  build-app:
    docker:
      - image: circleci/node:16.13.0
    
    # The current directory will be the place where all the steps will run
    working_directory: ~/project

    steps:
      # Checkout the code from the git branch into the working_directory
      - checkout
      # Log the current branch for debugging purposes
      - run:
          name: Log the current branch
          command: echo ${CIRCLE_BRANCH}
      # Restore local dependencies (node_modules) from the CircleCI cache if it exists
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      # Install project dependencies
      - run:
          name: Install local dependencies
          command: npm install
      # Cache local dependencies in CircleCI storage if they don't exist
      - save_cache:
          key: v1-dependencies-{{ checksum "package.json" }}
          paths:
              - node_modules
      # Install project dependencies
      - run:
          name: Install local dependencies
          command: 
            npm update
            ng update
            ng update--all--force
      - run:
          name: Build app
          command: |
            sudo npm i
            npm run build
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  # Lint the frontend source code
  lint-app:
    docker:
      - image: circleci/node:16.13.0
    steps:
      - checkout
      - restore_cache:
          key: frontend-build
      - run:
          name: Lint frontend
          command:
            npm ci
            npm run lint
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  lint-docker:
    docker: 
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - restore_cache:
          key: frontend-build
      - run:
          name: Lint docker
          command: |
            python3 -m venv venv
            . venv/bin/activate
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            hadolint ./Dockerfile
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  # Scan for known vulnerabilities
  scan-app:
    docker:
      - image: circleci/node:16.13.0
    steps:
      - checkout
      - run:
          name: Scan application files
          command: npm install

  test-app:
    docker:
      - image: circleci/node:16.13.0
    steps:
      - checkout
      - restore_cache:
          key: frontend-build
      # Test the source code
      - run:
          name: Test frontend source code
          command: 
            sudo npm install -g karma-cli
            npm run test --code-coverage
      - run:
          name: Run E2E tests
          command:  npm run

  build-and-push-image: 
    machine: true
    steps:
      - checkout
      - run:
          name: Create repository
          command:
            output=$(aws ecr describe-repositories --query 'repositories[?repositoryName==`ciangularapp`].repositoryName')
            if [ $? -ne 0 ]; then
              if echo ${output} | grep -q RepositoryNotFoundException; then
                aws ecr create-repository --region ${AWS_DEFAULT_REGION} --repository-name ${REPO_NAME}
              elif
                echo "Repository already exists."
              fi
            fi
            aws ecr create-repository --region ${AWS_DEFAULT_REGION} --repository-name ${REPO_NAME}
      - run:
          name: Build docker container  # https://dzone.com/articles/how-to-dockerize-angular-app
          command: |
            docker login --username ${DOCKER_LOGIN} --password ${Docker_PWD}
            docker build -t ciangularapp:latest . 
            docker images ls
            docker tag ciangularapp ${DOCKER_LOGIN}/ciangularapp:latest
            docker push ${DOCKER_LOGIN}/ciangularapp:latest

  # Deploy the angular app
  deploy-app:
      docker:
        - image: circleci/node:16.13.0
      working_directory: ~/project
      steps:
        - checkout
        - restore_cache:
            key: frontend-build
        - run:
            name: Install AWS CLI dependencies
            command: |
              sudo apt-get update && sudo apt-get install -yy less
              sudo apt-get install unzip -y
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
        - run:
            name: Deploy Docker Container Image to Amazon ECR
            command: |
              echo "Step 1: Authenticating Docker client to AWS ECR registry..."
              aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin 471776097205.dkr.ecr.eu-west-2.amazonaws.com

              echo "Step 2: Building the container locally..."
              docker build -t 471776097205.dkr.ecr.eu-west-2.amazonaws.com/ciangularapp:latest .

              echo "Step 3: Tagging the image so that it can be pushed to the repository..."
              #docker tag ciangularapp:latest 471776097205.dkr.ecr.eu-west-2.amazonaws.com/ciangularapp:latest

              echo "Step 4: Pushing the image the newly created Amazon repository..."              
              docker push 471776097205.dkr.ecr.eu-west-2.amazonaws.com/ciangularapp:latest

              aws ecs update-service --cluster ciangularapp-cluster --service angular-svc --force-new-deployment --no-cli-pager

              echo "Docker image upload completed!"
workflows:
    default:
      jobs:
        - build-app
        - scan-app:
            requires: [build-app]
        - lint-app:
            requires: [build-app]
        - lint-docker:
            requires: [lint-app, build-app]
        - test-app:
            requires: [build-app]
        - build-and-push-image:
            requires: [test-app, lint-app, lint-docker]
            filters:
              branches:
                only: [main]
        # The deploy job will only run on the filtered branches and
        # require the build job to be successful before it starts
        # - deploy-app:
        #     requires: [build-container]
        #     filters:
        #       branches:
        #         only:
        #           - develop
        #           - staging
        #           - main
        #           - master